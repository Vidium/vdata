import pickle
from pathlib import Path
from time import perf_counter
from typing import Generator

import numpy as np
import pytest
from ch5mpy import File, H5Mode
from h5py import string_dtype

from vdata import TemporalDataFrame
from vdata.tdf import TemporalDataFrameBase
from vdata.timepoint import TimePointArray

MAX_ELAPSED_TIME_SECONDS = 1


@pytest.fixture(scope='module')
def large_TDF(request: pytest.FixtureRequest) -> Generator[TemporalDataFrameBase, None, None]:
    if hasattr(request, 'param'):
        which = request.param

    else:
        which = 'plain'

    if 'backed' in which:
        with File('backed_large_TDF', H5Mode.WRITE_TRUNCATE) as h5_file:
            # write data to h5 file directly
            h5_file.attrs['name'] = 'large TDF'
            h5_file.attrs['locked_indices'] = False
            h5_file.attrs['locked_columns'] = False
            h5_file.attrs['timepoints_column_name'] = None
            h5_file.attrs['repeating_index'] = False

            h5_file.create_dataset('index', data=np.arange(20_000))
            
            h5_file.create_dataset('columns_numerical', data=np.array(['col1', 'col2'], dtype=np.dtype('O')),
                                   chunks=True, maxshape=(None,), dtype=string_dtype())
            h5_file['columns_numerical'].attrs['dtype'] = '<U4'
            
            h5_file.create_dataset('columns_string', data=np.array(['col3', 'col4'], dtype=np.dtype('O')),
                                   chunks=True, maxshape=(None,), dtype=string_dtype())
            h5_file['columns_string'].attrs['dtype'] = '<U4'

            h5_file.create_dataset('numerical_array', data=np.arange(40_000).reshape(20_000, 2),
                                   chunks=True, maxshape=(None, None))

            h5_file.create_dataset('string_array',
                                   data=np.arange(40_000, 80_000).astype(str).astype('O').reshape(20_000, 2),
                                   dtype=string_dtype(), chunks=True, maxshape=(None, None))
            h5_file['string_array'].attrs['dtype'] = '<U21'

            h5_file.create_group('timepoints_array')
            h5_file['timepoints_array'].attrs['__h5_type__'] = 'object'
            h5_file['timepoints_array'].attrs['__h5_class__'] = np.void(pickle.dumps(TimePointArray, 
                                                                                     protocol=pickle.HIGHEST_PROTOCOL))
            h5_file['timepoints_array'].attrs['unit'] = 'h'
            h5_file['timepoints_array'].create_dataset('array', data=np.repeat(np.arange(8), 2500))

        # read tdf from file
        TDF: TemporalDataFrameBase = TemporalDataFrame.read('backed_large_TDF', mode=H5Mode.READ_WRITE)

        if 'view' in which:
            yield TDF[:]

        else:
            yield TDF

        Path('backed_large_TDF').unlink()

    else:
        TDF = TemporalDataFrame({'col1': [i for i in range(20_000)],
                                 'col2': [i for i in range(20_000, 40_000)],
                                 'col3': [str(i) for i in range(40_000, 60_000)],
                                 'col4': [str(i) for i in range(60_000, 80_000)]},
                                name='large TDF',
                                time_list=['0h' for _ in range(2500)] +
                                          ['1h' for _ in range(2500)] +
                                          ['2h' for _ in range(2500)] +
                                          ['3h' for _ in range(2500)] +
                                          ['4h' for _ in range(2500)] +
                                          ['5h' for _ in range(2500)] +
                                          ['6h' for _ in range(2500)] +
                                          ['7h' for _ in range(2500)])

        if 'view' in which:
            yield TDF[:]

        else:
            yield TDF


@pytest.mark.parametrize(
    'large_TDF',
    ['plain', 'view', 'backed', 'backed view'],
    indirect=True
)
def test_fast_repr(large_TDF: TemporalDataFrameBase) -> None:
    start = perf_counter()
    repr(large_TDF)

    assert (perf_counter() - start) < MAX_ELAPSED_TIME_SECONDS


@pytest.mark.parametrize(
    'large_TDF',
    ['plain', 'view', 'backed', 'backed view'],
    indirect=True
)
def test_fast_subset(large_TDF: TemporalDataFrameBase) -> None:
    index = np.array([19120, 19840, 9500, 17420, 8300, 2820, 1860, 7220, 5420,
                      18280, 9980, 13240, 18600, 8340, 16060, 3780, 17500, 7760,
                      14500, 10840, 2520, 4660, 4860, 2880, 19940, 15840, 2220,
                      12040, 12160, 13100, 19800, 18220, 9300, 13660, 7780, 1380,
                      17560, 11340, 7600, 10040, 7260, 5760, 18440, 10620, 9820,
                      6920, 260, 6940, 180, 7700, 3660, 17920, 60, 2200,
                      3360, 8200, 17240, 7960, 1200, 11280, 15000, 8040, 6180,
                      8280, 3140, 11360, 18980, 3020, 19700, 10400, 14860, 160,
                      1820, 19500, 18400, 3820, 6700, 3500, 18540, 6080, 19900,
                      7920, 11860, 6620, 9280, 11000, 17820, 19740, 5500, 5520,
                      11180, 10000, 5880, 15620, 17080, 1980, 4760, 1640, 4300,
                      1040, 12300, 14420, 7460, 12520, 14940, 15280, 14200, 7020,
                      17160, 19920, 8920, 18320, 4780, 12100, 4140, 18160, 18340,
                      9060, 3580, 9360, 5280, 9600, 19220, 6980, 8160, 2460,
                      5620, 19440, 11080, 9120, 15440, 16260, 5940, 9340, 18260,
                      300, 18040, 17960, 12820, 10560, 10940, 12140, 15400, 16380,
                      14580, 16160, 15820, 3220, 3700, 17220, 14900, 7340, 5440,
                      5160, 12440, 11400, 8380, 1100, 6860, 17140, 19820, 11500,
                      9920, 19300, 440, 3940, 16740, 4380, 12280, 3560, 6380,
                      1300, 7380, 19360, 9660, 3300, 16440, 16320, 15020, 13340,
                      8860, 14000, 5340, 500, 14680, 9260, 3800, 19240, 13560,
                      7480, 6160, 8060, 4560, 4360, 1260, 4100, 16980, 12980,
                      14240, 6740, 40, 16120, 9160, 12420, 3720, 15360, 13200,
                      9440, 18580, 8480, 7120, 10500, 13060, 8620, 9000, 1620,
                      4440, 3180, 19640, 15900, 16080, 880, 700, 15920, 19460,
                      15080, 1320, 16800, 4020, 10020, 4120, 19980, 5320, 8140,
                      2340, 11040, 1140, 19560, 2320, 15880, 12580, 14220, 3420,
                      4000, 18460, 2240, 12480, 420, 13920, 19620, 4940, 8520,
                      9900, 2140, 13400, 8180, 16040, 4640, 5980, 5380, 1760,
                      6240, 10900, 6440, 15660, 5540, 7300, 8760, 5100, 9860,
                      13000, 13900, 7160, 4460, 9240, 2680, 2440, 12060, 14320,
                      11560, 15680, 5580, 16560, 14340, 9720, 18240, 18740, 13120,
                      13880, 1520, 16360, 2120, 11960, 4320, 11600, 8460, 14980,
                      3540, 15580, 14060, 11220, 9800, 13620, 1000, 4040, 7880,
                      5040, 4920, 10760, 14100, 18420, 16400, 4200, 2900, 17680,
                      17580, 19520, 18940, 11660, 4900, 7100, 2380, 18120, 3000,
                      13360, 9080, 17360, 11640, 16820, 10920, 2400, 19960, 13480,
                      11800, 15860, 13800, 6020, 13080, 18860, 19600, 6900, 13760,
                      9560, 13940, 6360, 19100, 7580, 920, 4720, 10180, 12700,
                      18080, 5120, 14520, 12340, 12560, 8600, 3080, 4400, 14380,
                      10660, 10340, 7660, 3840, 9380, 15200, 14280, 15780, 960,
                      3860, 10440, 16520, 6400, 18480, 17480, 5900, 11940, 17100,
                      13020, 17260, 14780, 6220, 14300, 9460, 16940, 7800, 11260,
                      13680, 19060, 3640, 4280, 11140, 13640, 8240, 1600, 3380,
                      14740, 3740, 7440, 12600, 9540, 4620, 6640, 3320, 3280,
                      11840, 17780, 17460, 8400, 5660, 7240, 14460, 13820, 8000,
                      16540, 2740, 11920, 10360, 15140, 7620, 1060, 17060, 17940,
                      14020, 6880, 760, 17300, 11720, 12900, 1480, 14360, 8660,
                      1680, 13160, 3200, 10260, 3960, 0, 9780, 12380, 16180,
                      10200, 10380, 17800, 1740, 6680, 18000, 16200, 13700, 17180,
                      900, 17620, 7040, 8740, 4260, 7900, 2280, 14800, 14160,
                      15520, 1580, 15040, 8580, 13460, 540, 4880, 7820, 8080,
                      18960, 7060, 11120, 13860, 19420, 15260, 1940, 16000, 11980,
                      6800, 4420, 14820, 3900, 14620, 19040, 12720, 720, 2600,
                      15220, 3980, 6460, 19860, 9760, 15760, 3440, 1020, 5020,
                      18520, 19400, 8800, 19760, 13600, 18020, 3760, 19280, 12840,
                      19180, 3480, 11820, 11020, 380, 7640, 11740, 15460, 13500,
                      5600, 3880, 6960, 17540, 660, 18640, 7680, 19260, 640,
                      15180, 14180, 2700, 10520, 460, 6600, 19780, 5700, 5060,
                      13520, 4840, 6720, 1660, 5860, 2180, 19000, 15700, 6260,
                      9880, 9140, 18660, 16720, 18900, 6500, 7000, 12740, 4340,
                      1120, 10720, 6300, 16500, 14600, 15240, 10060, 280, 10460,
                      5920, 18720, 12320, 14760, 15960, 6100, 12000, 6040, 10220,
                      12500, 13720, 1700, 2960, 12080, 19380, 19540, 13320, 3520,
                      4520, 3680, 2760, 13300, 1560, 3340, 17700, 18700, 2160,
                      19140, 8820, 16480, 16020, 7740, 14640, 9840, 2720, 18680,
                      9420, 3920, 2300, 10740, 13540, 16620, 17640, 15560, 11160,
                      7200, 19680, 5360, 4580, 680, 1420, 12780, 11760, 4680,
                      18820, 2060, 7980, 10080, 9400, 5460, 9520, 16900, 16420,
                      11580, 820, 16920, 4080, 15340, 11880, 8700, 11480, 120,
                      2660, 12020, 980, 12360, 15320, 6120, 17340, 15380, 8780,
                      11420, 13140, 8880, 11440, 11300, 13580, 18060, 11620, 860,
                      1900, 15480, 1160, 15600, 11240, 9740, 8980, 6660, 18560,
                      7720, 16860, 10700, 15980, 5180, 12960, 18880, 15500, 12400,
                      11520, 17760, 17020, 5820, 12620, 7860, 12240, 18100, 5480,
                      14140, 8640, 17000, 8100, 2100, 5220, 10320, 6340, 7400,
                      7080, 600, 12460, 3120, 10140, 1460, 4700, 140, 2040,
                      11780, 5800, 1180, 10540, 4820, 3400, 18300, 16100, 15120,
                      2920, 780, 3040, 18500, 17880, 2420, 8560, 9620, 360,
                      7560, 4960, 2560, 6820, 11540, 4060, 8260, 6760, 8320,
                      14080, 10780, 17840, 16580, 16760, 14400, 17400, 18840, 19880,
                      2980, 8940, 1280, 12540, 9100, 16220, 1920, 5240, 10860,
                      7500, 2020, 10300, 18760, 6520, 4540, 1780, 10980, 1220,
                      8900, 19340, 17320, 12200, 340, 13420, 18620, 10800, 13380,
                      5400, 7180, 2840, 16700, 7280, 6420, 11900, 18180, 11100,
                      6480, 320, 5740, 13040, 14720, 9480, 7140, 740, 16300,
                      9960, 800, 16140, 5080, 3160, 580, 14840, 1880, 16880,
                      8720, 17600, 8020, 12640, 5140, 200, 2860, 3600, 7320,
                      16600, 840, 8500, 13780, 6840, 10580, 6280, 2540, 8960,
                      15940, 17280, 1960, 1500, 9640, 16460, 17040, 1080, 11460,
                      16340, 14660, 15300, 9220, 14700, 17660, 15420, 8420, 19660,
                      17980, 13440, 15540, 12120, 16240, 10280, 19320, 16280, 7840,
                      15740, 1340, 14440, 16840, 5720, 1840, 10820, 4740, 17200,
                      7360, 4480, 17440, 17900, 14040, 220, 7940, 6540, 400,
                      13260, 16780, 10100, 19080, 19160, 17520, 18780, 9940, 11680,
                      4800, 5000, 3260, 620, 15720, 15640, 6200, 19480, 240,
                      12800, 80, 19200, 7420, 10420, 5840, 15160, 1440, 12760,
                      13180, 12860, 5780, 2620, 5640, 5200, 1540, 12680, 8840,
                      4160, 1400, 10880, 9200, 4220, 13960, 11200, 14480, 17720,
                      15800, 17120, 7540, 2580, 6000, 8120, 4980, 5260, 480,
                      9320, 12920, 5560, 8360, 18360, 11700, 9180, 11380, 2000,
                      12940, 14120, 11060, 6320, 2780, 19580, 14880, 2940, 17860,
                      8680, 8220, 1360, 3620, 16960, 940, 4500, 10680, 6560,
                      6580, 100, 3240, 520, 13280, 16640, 1240, 8440, 2360,
                      14920, 13740, 9700, 9680, 12220, 9020, 2080, 4600, 8540,
                      18920, 13220, 6060, 10480, 9580, 20, 17380, 2260, 16660,
                      4240, 18200, 2800, 5680, 14260, 14560, 16680, 13980, 15060,
                      14540, 13840, 11320, 10960, 3100, 6780, 10600, 19720, 12260,
                      6140, 17740, 15100, 18380, 2640, 18140, 10240, 10160, 7520,
                      1800, 2480, 560, 10120, 12180, 12660, 9040, 18800, 5300,
                      12880, 14960, 19020, 3460, 2500, 4180, 10640, 5960, 3060,
                      1720])

    start = perf_counter()
    _ = large_TDF[['2h', '0h', '4h'], index]

    assert (perf_counter() - start) < MAX_ELAPSED_TIME_SECONDS
